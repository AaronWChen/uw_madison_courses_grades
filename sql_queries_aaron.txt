File contains a rotating list of SQL queries that may be used in final 
Python scripts


teachings table
SELECT COUNT(DISTINCT instructor_id) as teacher_count, COUNT(DISTINCT section_uuid) as section_count
FROM teachings;
    This let us know that the primary key was actually section_uuid

rooms table
SELECT COUNT(DISTINCT uuid) as room_count, COUNT(DISTINCT facility_code) as facility_count, COUNT(DISTINCT room_code) as room_count
FROM rooms;

schedules table
SELECT COUNT(DISTINCT uuid) as class_id, COUNT(DISTINCT start_time) as start_times, 
COUNT(DISTINCT end_time) as end_times,
COUNT(DISTINCT mon) as mondays,
COUNT(DISTINCT tues) as tuesdays,
COUNT(DISTINCT wed) as wednesdays,
COUNT(DISTINCT thurs) as thursdays,
COUNT(DISTINCT fri) as fridays,
COUNT(DISTINCT sat) as saturdays,
COUNT(DISTINCT sun) as sundays
FROM schedules
WHERE start_time != '-1';


sections table
SELECT * 
FROM sections.columns


SELECT c.name as course__name, c.number, 
    co.term_code, co.name as course_offering_name, 
    sections.section_type, 
    inst.name, 
FROM courses as c
JOIN course_offerings as co on c.uuid = co.course_uuid
JOIN sections on co.uuid = sections.course_offering_uuid
JOIN schedules as sch on sections.schedule_uuid = sch.uuid
JOIN rooms on sections.room_uuid = rooms.uuid
JOIN teachings on sections.uuid = teachings.section_uuid
JOIN instructors as inst on teachings.instructor_id = inst.id;

SELECT c.name as course__name, c.number, 
    co.term_code, co.name as course_offering_name, 
    sections.section_type, 
    inst.name 
FROM courses as c
JOIN course_offerings as co on c.uuid = co.course_uuid
JOIN sections on co.uuid = sections.course_offering_uuid
JOIN schedules as sch on sections.schedule_uuid = sch.uuid
JOIN rooms on sections.room_uuid = rooms.uuid
JOIN teachings on sections.uuid = teachings.section_uuid
JOIN instructors as inst on teachings.instructor_id = inst.id
WHERE start_time = '-1';

SELECT COUNT(DISTINCT c.name) as course_names, COUNT(DISTINCT c.number) as course_numbers, 
    COUNT(DISTINCT co.term_code), COUNT(DISTINCT co.name) as course_offering_name, 
    COUNT(DISTINCT sections.section_type), 
    COUNT(DISTINCT inst.name) 
FROM courses as c
JOIN course_offerings as co on c.uuid = co.course_uuid
JOIN sections on co.uuid = sections.course_offering_uuid
JOIN schedules as sch on sections.schedule_uuid = sch.uuid
JOIN rooms on sections.room_uuid = rooms.uuid
JOIN teachings on sections.uuid = teachings.section_uuid
JOIN instructors as inst on teachings.instructor_id = inst.id
WHERE start_time = '-1';
    Uniques: 390 course_names, 285 course numbers, 22 term codes, 395 course offering names, 
            5 section types, 664 instructors

CREATE MATERIALIZED VIEW start_time_at_minus_one as
    SELECT COUNT(DISTINCT c.name) as course_names, COUNT(DISTINCT c.number) as course_numbers, 
        COUNT(DISTINCT co.term_code) as term_codes, COUNT(DISTINCT co.name) as course_offering_names, 
        COUNT(DISTINCT sections.section_type) as section_types, 
        COUNT(DISTINCT inst.name) as teachers
    FROM courses as c
    JOIN course_offerings as co on c.uuid = co.course_uuid
    JOIN sections on co.uuid = sections.course_offering_uuid
    JOIN schedules as sch on sections.schedule_uuid = sch.uuid
    JOIN rooms on sections.room_uuid = rooms.uuid
    JOIN teachings on sections.uuid = teachings.section_uuid
    JOIN instructors as inst on teachings.instructor_id = inst.id
    WHERE start_time = '-1';


SELECT COUNT(DISTINCT c.name) as course_names, COUNT(DISTINCT c.number) as course_numbers, 
    COUNT(DISTINCT co.term_code), COUNT(DISTINCT co.name) as course_offering_name, 
    COUNT(DISTINCT sections.section_type), 
    COUNT(DISTINCT inst.name) 
FROM courses as c
JOIN course_offerings as co on c.uuid = co.course_uuid
JOIN sections on co.uuid = sections.course_offering_uuid
JOIN schedules as sch on sections.schedule_uuid = sch.uuid
JOIN rooms on sections.room_uuid = rooms.uuid
JOIN teachings on sections.uuid = teachings.section_uuid
JOIN instructors as inst on teachings.instructor_id = inst.id
WHERE end_time = '-1';
    Appears to make the same table as the start_time_at_minus_one table

CREATE MATERIALIZED VIEW start_time_at_minus_one as
    SELECT c.name as course_names, c.number as course_numbers, 
        co.term_code as term_codes, co.name as course_offering_names, co.uuid as course_offering_id,
        sections.section_type as section_types, 
        inst.name as teachers
    FROM courses as c
    JOIN course_offerings as co on c.uuid = co.course_uuid
    JOIN sections on co.uuid = sections.course_offering_uuid
    JOIN schedules as sch on sections.schedule_uuid = sch.uuid
    JOIN rooms on sections.room_uuid = rooms.uuid
    JOIN teachings on sections.uuid = teachings.section_uuid
    JOIN instructors as inst on teachings.instructor_id = inst.id
    WHERE start_time = '-1';


CREATE MATERIALIZED VIEW end_time_at_minus_one as
    SELECT c.name as course_names, c.number as course_numbers, 
        co.term_code as term_codes, co.name as course_offering_names, co.uuid as course_offering_id,
        sections.section_type as section_types, 
        inst.name as teachers
    FROM courses as c
    JOIN course_offerings as co on c.uuid = co.course_uuid
    JOIN sections on co.uuid = sections.course_offering_uuid
    JOIN schedules as sch on sections.schedule_uuid = sch.uuid
    JOIN rooms on sections.room_uuid = rooms.uuid
    JOIN teachings on sections.uuid = teachings.section_uuid
    JOIN instructors as inst on teachings.instructor_id = inst.id
    WHERE end_time = '-1';


SELECT count (1)
FROM start_time_at_minus_one as a
FULL OUTER JOIN end_time_at_minus_one as b
    USING (course_offering_id)
WHERE a.course_offering_id IS NULL
    OR b.course_offering_id IS NULL ;

SELECT COUNT(*)
FROM all_morning_classes
SEMI JOIN all_afternoon_classes USING (uuid);
GROUP BY uuid;